#下载数据
f='GSE24673_eSet.Rdata'
library(GEOquery)
if(!file.exists(f)){
  gset <- getGEO('GSE24673',destdir=".",
                  AnnotGPL=F,    
                  getGPL=F)　　　 
  save(gset,file=f)    
}


h='GSE42872_eSet.Rdata'
library(GEOquery)
if(!file.exists(h)){
  gset1 <- getGEO('GSE42872',destdir=".",
                 AnnotGPL=F,    
                 getGPL=F)　　　 
  save(gset1,file=h)    
}

#获得表达矩阵
ob=gset[[1]]
exprSet=exprs(ob)
samples=sampleNames(ob)
pdata=pData(ob)
group_list=as.character(pdata[,2])
dim(exprSet)
exprSet[1:5,1:5]
#获得基因注释
#平台没有专用Ｒ包
if(F){
  library(GEOquery)
  gpl <- getGEO('GPL6244',destdir = ".")
  colnames(Table(gpl))
  head(Table(gpl)[,c(1,15)])
  probe2gene=Table(gpl)[,c(1,15)]
  save(probe2gene,file='probe2gene.Rdata')
}
#平台有专用Ｒ包（http://www.bio-info-trainee.com/1399.html）
BiocManager::install('hugene10sttranscriptcluster.db')
library(hugene10sttranscriptcluster.db)

#ID转换
ids=toTable(hugene10sttranscriptclusterSYMBOL)
length(unique(ids$symbol))
#查看哪些基因有重复
tail(sort(table(ids$symbol)))
table(sort(table(ids$symbol)))
#将探针对应到基因
table(rownames(exprSet) %in% ids$probe_id)
dim(exprSet)
#过滤掉没有探针的基因
exprSet=exprSet[rownames(exprSet) %in% ids$probe_id,]
dim(exprSet)
ids=ids[match(rownames(exprSet),ids$probe_id),]
#合并
wzh <- function(exprSet,ids){
  tmp=by(exprSet,
         ids$symbol,
         function(x) rownames(x)[which.max(rowMeans(x))])
  probes = as.character(tmp)
  print(dim(exprSet))
  exprSet=exprSet[rownames(exprSet) %in% probes,]
  print(dim(exprSet))
  rownames(exprSet)=ids[match(rownames(exprSet),ids$probe_id),2]
  return(exprSet)
}
new_exprSet <- wzh(exprSet,ids)
#绘图
library(reshape2)
exprSet_L=melt(new_exprSet)
colnames(exprSet_L)=c('probe','sample','value')
library(stringr)
group_list=str_split(pdata$title,'_',simplify = T)[,1:2]
group_list=apply(group_list,1,function(x) paste(x,collapse = '_'))
group_list[10:11]=c('healthy','healthy')
exprSet_L$group=rep(group_list,each=nrow(new_exprSet))
head(exprSet_L)
###ggplot2
p=ggplot(exprSet_L,aes(x=sample,y=value,fill=group))+geom_boxplot()
print(p)
p=ggplot(exprSet_L,aes(x=sample,y=value,fill=group))+geom_violin()
print(p)
#PCA
library(ggfortify)
df=as.data.frame(t(exprSet))
df$group=group_list
png('pca.png',res=120)
autoplot(prcomp(df[,1:(ncol(df)-1)]),data=df,colour='group')+theme_bw()
dev.off()

#差异分析
#t.test
dat = exprSet
group_list=as.factor(group_list)
group1=which(group_list == levels(group_list)[1])
group2=which(group_list == levels(group_list)[2])
dat1=dat[,group1]
dat2=dat[,group2]
dat=cbind(dat1,dat2)
pvals=apply(exprSet,1,function(x){
  t.test(as.numeric(x)~group_list)$p.value
})
p.adj=p.adjust(pvals,method="BH")
avg_1=rowMeans(dat1)
avg_2=rowMeans(dat2)
log2FC=avg_2-avg_1
DEG_t.test = cbind(avg_1,avg_2,log2FC,pvals,p.adj)
DEG_t.test=DEG_t.test[order(DEG_t.test[,4]),]
DEG_t.test=as.data.frame(DEG_t.test)
head(DEG_t.test)

#DEG by limma
suppressMessages(library(limma))
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=colnames(exprSet)
design
#compare progress and stable
contrast.matrix <- makeContrasts(paste0(unique(group_list),collapse='-'),levels=design)
contrast.matrix
#step1
fit <- lmFit(exprSet,design)
#step2
fit2 <- contrasts.fit(fit,contrast.matrix)
fit2 <- eBayes(fit2)
#step3
tempOutput = topTable(fit2,coef=1,n=Inf)
nrDEG = na.omit(tempOutput)
head(nrDEG)

#数据存储及提取
save(exprSet,group_list,file='for_DEG.Rdata')
load(file='for_DEG.Rdata')
